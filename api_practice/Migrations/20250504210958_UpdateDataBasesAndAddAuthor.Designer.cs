// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_practice.DbContexts;

#nullable disable

namespace api_practice.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250504210958_UpdateDataBasesAndAddAuthor")]
    partial class UpdateDataBasesAndAddAuthor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("api_practice.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "F. Scott Fitzgerald"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Harper Lee"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Stephen Hawking"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Carl Sagan"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Yuval Noah Harari"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Jared Diamond"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "E.B. White"
                        });
                });

            modelBuilder.Entity("api_practice.Entities.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            Description = "A novel about the American dream set in the 1920s.",
                            ISBN = "9780743273565",
                            Price = 12.99m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5760),
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 1,
                            Description = "A powerful story on racism and justice.",
                            ISBN = "9780060935467",
                            Price = 10.50m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5905),
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CategoryId = 2,
                            Description = "A landmark volume in scientific writing.",
                            ISBN = "9780553380163",
                            Price = 18.00m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5906),
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CategoryId = 2,
                            Description = "Exploration of space and time.",
                            ISBN = "9780345539434",
                            Price = 20.00m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5907),
                            Title = "Cosmos"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            CategoryId = 3,
                            Description = "A global history of humankind.",
                            ISBN = "9780062316110",
                            Price = 16.75m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5909),
                            Title = "Sapiens: A Brief History of Humankind"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            CategoryId = 3,
                            Description = "How civilizations developed differently across continents.",
                            ISBN = "9780393317558",
                            Price = 17.50m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5911),
                            Title = "Guns, Germs, and Steel"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            CategoryId = 4,
                            Description = "The magical beginning of the Harry Potter series.",
                            ISBN = "9780590353427",
                            Price = 9.99m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5912),
                            Title = "Harry Potter and the Sorcerer’s Stone"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            CategoryId = 4,
                            Description = "A story of friendship between a pig and a spider.",
                            ISBN = "9780061124952",
                            Price = 7.99m,
                            PublishedDate = new DateTime(2025, 5, 4, 21, 9, 57, 438, DateTimeKind.Utc).AddTicks(5913),
                            Title = "Charlotte’s Web"
                        });
                });

            modelBuilder.Entity("api_practice.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Name = "History"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Children"
                        });
                });

            modelBuilder.Entity("api_practice.Entities.Books", b =>
                {
                    b.HasOne("api_practice.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_practice.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api_practice.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("api_practice.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
